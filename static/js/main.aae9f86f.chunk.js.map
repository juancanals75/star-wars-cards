{"version":3,"sources":["fonts/Starjedi.ttf","fonts/anakinmono.ttf","LoadingScreen.js","Header.js","ModalCard.js","SearchBar.js","Character.js","CharList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoadingScreen","props","className","Header","href","ModalCard","genderTxt","hairTxt","modalInfo","name","mass","height","birth_year","eye_color","gender","hair_color","onClick","SearchBar","value","searchTxt","placeholder","onChange","handleChange","Character","CharList","state","filtered","showModal","showList","bind","this","setState","allPeople","find","currentValue","setTimeout","e","target","newList","filter","item","currentItem","toString","toLowerCase","replace","searchValue","includes","CSSTransition","in","unmountOnExit","timeout","onExited","classNames","TransitionGroup","map","charProps","index","key","React","Component","App","abortController","AbortController","isLoading","fetchError","allFetch","i","fetchUrl","fetch","then","response","json","results","Promise","all","signal","values","flat","catch","error","console","log","abort","loadCheck","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aae9f86f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","module.exports = __webpack_public_path__ + \"static/media/anakinmono.c982ef25.ttf\";","import React from 'react'\r\n\r\nfunction LoadingScreen(props) {\r\n  return (\r\n    <div className=\"loading-container\">\r\n      <h2>Fetching data</h2>\r\n      <div className=\"lds-ellipsis\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingScreen\r\n","import React from 'react'\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h3>STAR WARS CARDS</h3>\r\n      <a href=\"https://swapi.co/\" className=\"header-link\">Data by SWAPI</a>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction ModalCard(props) {\r\n  const {name, mass, height, birth_year, eye_color, gender, hair_color} = props.modalInfo\r\n\r\n  let genderTxt\r\n  if (gender === \"none\") {\r\n    genderTxt = \"No Gender\"\r\n  } else if (gender === \"n/a\") {\r\n    genderTxt = \"Gender: Unknown\"\r\n  } else {\r\n    genderTxt = \"Gender: \" + gender\r\n  }\r\n\r\n  let hairTxt\r\n  if (hair_color === \"none\") {\r\n    hairTxt = \"No Hair\"\r\n  } else if (hair_color === \"n/a\") {\r\n    hairTxt = \"Hair Color: Unknown\"\r\n  } else {\r\n    hairTxt = \"Hair Color: \" + hair_color\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <h2>{name}</h2>\r\n      <p>Mass: {mass === \"unknown\" ? \"Unknown\" : mass + \"Kg\"}</p>\r\n      <p>Height: {height === \"unknown\" ? \"Unknown\" : height + \"cm\"}</p>\r\n      <p>Year of birth: {birth_year === \"unknown\" ? \"Unknown\" : birth_year}</p>\r\n      <p>Eye color: {eye_color}</p>\r\n      <p>{genderTxt}</p>\r\n      <p>{hairTxt}</p>\r\n      <div className=\"back-btn\" onClick={props.onClick}>Back to the list</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default ModalCard\r\n","import React from 'react'\r\n\r\nexport default function SearchBar(props) {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        name=\"search\"\r\n        value={props.searchTxt}\r\n        placeholder=\"Search by name\"\r\n        onChange={props.handleChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Character(props) {\r\n  return (\r\n      <div onClick={props.onClick} className=\"character\">\r\n        {props.name}\r\n      </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\r\nimport ModalCard from './ModalCard'\r\nimport SearchBar from './SearchBar'\r\nimport Character from './Character'\r\n\r\nclass CharList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      filtered: [],\r\n      searchTxt : \"\",\r\n      showModal: false,\r\n      showList: true,\r\n      modalInfo: []\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.showModal = this.showModal.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({filtered: this.props.allPeople})\r\n  }\r\n\r\n  showModal(name) {\r\n    const modalInfo = this.props.allPeople.find(currentValue => currentValue.name === name )\r\n    this.setState({\r\n      modalInfo: modalInfo,\r\n      showList: false\r\n    })\r\n    setTimeout(() => this.setState({showModal: true}), 500);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({searchTxt: e.target.value})\r\n\r\n    let currentList = []\r\n    let newList = []\r\n\r\n    if (e.target.value !== \"\") {\r\n      currentList = this.props.allPeople\r\n      newList = currentList.filter(item => {\r\n        const currentItem = (item.name.toString()).toLowerCase().replace(\"-\", \"\")\r\n        const searchValue = (e.target.value.toString()).toLowerCase()\r\n        return (currentItem.includes(searchValue))\r\n      })\r\n    } else {\r\n      newList = this.props.allPeople\r\n    }\r\n\r\n    this.setState({ filtered: newList})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"list-container\">\r\n        <SearchBar\r\n          handleChange={this.handleChange}\r\n          searchTxt={this.state.searchTxt}\r\n        />\r\n        <CSSTransition\r\n          in={this.state.showModal}\r\n          unmountOnExit\r\n          timeout={500}\r\n          onExited={() => this.setState({showList: true})}\r\n          classNames=\"fade\"\r\n        >\r\n          <ModalCard\r\n            onClick={() => this.setState({showModal: false})}\r\n            modalInfo={this.state.modalInfo}\r\n          />\r\n        </CSSTransition>\r\n        <TransitionGroup className=\"list-results\">\r\n          {this.state.showList && (\r\n            this.state.filtered.map((charProps, index) => (\r\n              <CSSTransition\r\n                timeout={500}\r\n                classNames=\"fade\"\r\n                unmountOnExit\r\n                key={index}\r\n              >\r\n                <Character\r\n                  onClick={() => this.showModal(charProps.name)}\r\n                  {...charProps}\r\n                />\r\n              </CSSTransition>\r\n            ))\r\n          )}\r\n        </TransitionGroup>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CharList\r\n","import React from 'react'\r\nimport LoadingScreen from './LoadingScreen'\r\nimport Header from './Header'\r\nimport CharList from './CharList'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      allPeople: [],\r\n      isLoading: false,\r\n      fetchError: false\r\n    }\r\n  }\r\n\r\n  abortController = new AbortController()\r\n\r\n  componentDidMount() {\r\n    let allFetch = []\r\n    this.setState({isLoading: true})\r\n    for (let i = 1; i < 10; i++) {\r\n      const fetchUrl = \"https://swapi.co/api/people/?page=\" + i\r\n      allFetch[i-1] = fetch(fetchUrl).then(response => response.json()).then(response => response.results)\r\n    }\r\n\r\n    Promise.all(allFetch, {signal: this.abortController.signal}).then(values => {\r\n      this.setState({\r\n        allPeople: values.flat(),\r\n        isLoading: false\r\n      })\r\n    })\r\n    .catch(error => {\r\n      this.setState({fetchError: true})\r\n      console.log(error)\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.abortController.abort()\r\n  }\r\n\r\n  render() {\r\n    let loadCheck\r\n\r\n    if (this.state.isLoading && !this.state.fetchError) {\r\n      loadCheck = <LoadingScreen />\r\n    } else if (this.state.fetchError) {\r\n      loadCheck = <h2>FAILED TO FETCH DATA</h2>\r\n    } else {\r\n      loadCheck = <CharList allPeople={this.state.allPeople}/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <main>{loadCheck}</main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './fonts/Starjedi.ttf';\r\nimport './fonts/anakinmono.ttf';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}