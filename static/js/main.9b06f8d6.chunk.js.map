{"version":3,"sources":["assets/fonts/Starjedi.ttf","assets/fonts/anakinmono.ttf","components/Character/Character-view.js","components/CharList/CharList-view.js","components/ModalCard/ModalCard-view.js","components/CharList/CharList-container.js","components/SearchBar/SearchBar-view.js","components/App.js","components/LoadingScreen/LoadingScreen-view.js","utils/FetchHandler.js","serviceWorker.js","index.js"],"names":["module","exports","Character","props","onClick","className","name","CharListView","filtered","map","charProps","displayModal","ModalCard","genderTxt","hairTxt","modalInfo","mass","height","birth_year","eye_color","gender","hair_color","Modal","show","onHide","handleClose","centered","Header","closeButton","Title","Body","CharListContainer","state","showModal","allPeople","find","currentValue","setState","this","React","Component","SearchBar","value","searchTxt","placeholder","onChange","handleChange","App","useState","setSearchTxt","data","setFiltered","e","target","newList","filter","item","currentItem","toString","toLowerCase","replace","searchValue","includes","LoadingScreen","error","Spinner","animation","variant","FetchHandler","isLoading","fetchError","fetchMultiple","url","allFetch","i","fetchUrl","fetch","then","response","json","results","Promise","all","signal","abortController","values","flat","catch","fetchSingle","res","AbortController","multiple","abort","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b06f8d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","module.exports = __webpack_public_path__ + \"static/media/anakinmono.c982ef25.ttf\";","import React from 'react'\r\nimport './Character.css'\r\n\r\nconst Character = (props) => (\r\n  <div onClick={props.onClick} className=\"character\">\r\n    {props.name}\r\n  </div>\r\n)\r\n\r\nexport default Character\r\n","import React from 'react'\r\nimport Character from '../Character'\r\nimport './CharList.css'\r\n\r\n\r\nconst CharListView = props => (\r\n  <div className=\"list-container\">\r\n    <div className=\"list-results\">\r\n      {props.filtered.map((charProps) => (\r\n          <Character\r\n            onClick={() => props.displayModal(charProps.name)}\r\n            {...charProps}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default CharListView\r\n","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nfunction ModalCard(props) {\r\n  const {name, mass, height, birth_year, eye_color, gender, hair_color} = props.modalInfo\r\n\r\n  let genderTxt\r\n  if (gender === \"none\" || gender === \"n/a\") {\r\n    genderTxt = \"n/a\"\r\n  } else {\r\n    genderTxt = \"Gender: \" + gender\r\n  }\r\n\r\n  let hairTxt\r\n  if (hair_color === \"none\" || hair_color === \"n/a\") {\r\n    hairTxt = \"n/a\"\r\n  } else {\r\n    hairTxt = \"Hair Color: \" + hair_color\r\n  }\r\n\r\n  return (\r\n    <Modal show={props.show} onHide={props.handleClose} centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{name}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h4>Known Attributes</h4>\r\n        <p>{mass === \"unknown\" ? null : \"Mass: \" + mass + \"Kg\"}</p>\r\n        <p>{height === \"unknown\" ? null : \"Height: \" + height + \"cm\"}</p>\r\n        <p>{birth_year === \"unknown\" ? null : \"Year of birth: \" + birth_year}</p>\r\n        <p>Eye color: {eye_color}</p>\r\n        <p>{genderTxt === \"n/a\" ? null : genderTxt}</p>\r\n        <p>{hairTxt === \"n/a\" ? null : hairTxt}</p>\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ModalCard\r\n","import React from \"react\"\r\nimport CharListView from \"./CharList-view\"\r\nimport ModalCard from \"../ModalCard\"\r\n\r\nclass CharListContainer extends React.Component {\r\n  state = {\r\n    showModal: false,\r\n    modalInfo: []\r\n  }\r\n\r\n  displayModal = (name) => {\r\n    // Finds the selected character in the array to pull all info. Needs to be updated to a Unique ID\r\n    const modalInfo = this.props.allPeople.find(currentValue => currentValue.name === name )\r\n\r\n    this.setState({\r\n      modalInfo: modalInfo,\r\n      showModal: true\r\n    })\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showModal: false\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const {showModal, modalInfo} = this.state\r\n    return (\r\n      <>\r\n        <ModalCard show={showModal} handleClose={this.handleClose} modalInfo={modalInfo}/>\r\n        <CharListView\r\n          filtered={this.props.filtered}\r\n          displayModal={this.displayModal}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CharListContainer\r\n","import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nconst SearchBar = (props) => (\r\n  <div className=\"search\">\r\n    <input\r\n      name=\"search\"\r\n      value={props.searchTxt}\r\n      placeholder=\"Search by name\"\r\n      onChange={props.handleChange}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default SearchBar\r\n","import React, {useState} from 'react'\r\nimport CharList from './CharList'\r\nimport SearchBar from './SearchBar'\r\n\r\nfunction App(props) {\r\n  const [searchTxt, setSearchTxt] = useState(\"\")\r\n  const [filtered, setFiltered] = useState(props.data)\r\n\r\n  const handleChange = (e) => {\r\n    setSearchTxt(e.target.value)\r\n\r\n    let currentList = []\r\n    let newList = []\r\n\r\n    if (e.target.value !== \"\") {\r\n      currentList = props.data\r\n      newList = currentList.filter(item => {\r\n        const currentItem = (item.name.toString()).toLowerCase().replace(\"-\", \"\")\r\n        const searchValue = (e.target.value.toString()).toLowerCase()\r\n        return (currentItem.includes(searchValue))\r\n      })\r\n    } else {\r\n      newList = props.data\r\n    }\r\n\r\n    setFiltered(newList)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        handleChange={handleChange}\r\n        searchTxt={searchTxt}\r\n      />\r\n      <CharList\r\n        allPeople={props.data}\r\n        filtered={filtered}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default App\r\n","import React from 'react'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport './LoadingScreen.css'\r\n\r\nconst LoadingScreen = (props) => (\r\n  props.error ?\r\n  <h1>ERROR GETTING DATA</h1> :\r\n  <div className=\"loading-container\">\r\n    <h2>Fetching data</h2>\r\n    <Spinner animation=\"border\" variant=\"light\" />\r\n  </div>\r\n)\r\n\r\nexport default LoadingScreen\r\n","import React, {Component} from \"react\"\r\nimport LoadingScreen from \"../components/LoadingScreen\"\r\n\r\nclass FetchHandler extends Component {\r\n\r\n  // GOOGLE SEARCH URL ----> \"https://www.googleapis.com/customsearch/v1?key=AIzaSyCYQVI6Msbzsl2zZ2DgIzTXI32vDApd9Gs&cx=007158060221416245727:s9zphajttz8&searchType=image&q=\"\r\n\r\n  state = {\r\n    data: [],\r\n    isLoading: false,\r\n    fetchError: false\r\n  }\r\n\r\n  // Fetch if url has multiple pages\r\n  fetchMultiple = (url) => {\r\n    let allFetch = []\r\n    for (let i = 1; i < 10; i++) {\r\n      const fetchUrl = url + i\r\n      allFetch[i-1] = fetch(fetchUrl).then(response => response.json()).then(response => response.results)\r\n    }\r\n\r\n    Promise.all(allFetch, {signal: this.abortController.signal}).then(values => {\r\n      this.setState({\r\n        data: values.flat(),\r\n        isLoading: false\r\n      })\r\n    })\r\n    .catch(error => {\r\n      this.setState({fetchError: true})\r\n    })\r\n  }\r\n\r\n  // Fetch a single URL\r\n  fetchSingle = (url) => {\r\n    fetch(url).then(res => res.json()).then(data => {\r\n      this.setState({\r\n        data: data,\r\n        isLoading: false\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoading: true})\r\n    this.props.multiple ? this.fetchMultiple(this.props.url) : this.fetchSingle(this.props.url)\r\n\r\n  }\r\n\r\n  // Make sure to kill fetch to prevent infinte loops\r\n  abortController = new AbortController()\r\n  componentWillUnmount() {\r\n    this.abortController.abort()\r\n  }\r\n\r\n  render() {\r\n    const {isLoading, fetchError, data} = this.state\r\n    if (isLoading) {\r\n      return (\r\n        <LoadingScreen error={fetchError} />\r\n      )\r\n    }\r\n    return (\r\n      this.props.children({data})\r\n    )\r\n  }\r\n}\r\n\r\nexport default FetchHandler\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './index.css';\r\nimport './assets/fonts/Starjedi.ttf';\r\nimport './assets/fonts/anakinmono.ttf';\r\n\r\nimport App from './components/App';\r\nimport FetchHandler from \"./utils/FetchHandler\"\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <FetchHandler url=\"https://swapi.co/api/people/?page=\" multiple={true}>\r\n    {({data}) => (\r\n      <main>\r\n        <App\r\n          data={data}\r\n        />\r\n      </main>\r\n    )}\r\n  </FetchHandler>,\r\n  document.getElementById('root'));\r\n\r\n\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}